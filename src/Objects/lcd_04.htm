<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lcd_04.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lcd_04.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Mar 19 17:41:43 2019
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Appl_Proc &rArr; Auth_Fsm_Proc &rArr; After_Switch_Stoke_Proc &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18]">Reset_Handler</a>
 <LI><a href="#[32]">__user_initial_stackheap</a>
 <LI><a href="#[19]">Undef_Handler</a>
 <LI><a href="#[1a]">SWI_Handler</a>
 <LI><a href="#[1b]">PAbt_Handler</a>
 <LI><a href="#[1c]">DAbt_Handler</a>
 <LI><a href="#[1d]">IRQ_Handler</a>
 <LI><a href="#[1e]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[62]">Config_Consucc_Bits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[60]">Read_LCD_Command</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[93]">Reset_SW_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[5f]">IO_Channels_Func_Set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[74]">IO_Ch_To_SW_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[73]">SW_Ch_UnConfig_By_IO_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[5c]">Check_LCD_Busy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[85]">LCD_Write_Char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[43]">LCD_Disp_Str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[48]">LCD_Write_Command</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[42]">LCD_Disp_Goto_XY</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[19]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Undef_Handler</a><BR>
 <LI><a href="#[1a]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SWI_Handler</a><BR>
 <LI><a href="#[1b]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PAbt_Handler</a><BR>
 <LI><a href="#[1c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DAbt_Handler</a><BR>
 <LI><a href="#[1d]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ_Handler</a><BR>
 <LI><a href="#[1e]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1d]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">Keyboard_Allow_Access</a> from keyboard.o(i.Keyboard_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[a]">Keyboard_DeInit</a> from keyboard.o(i.Keyboard_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[e]">Keyboard_Disable</a> from keyboard.o(i.Keyboard_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[f]">Keyboard_Enable</a> from keyboard.o(i.Keyboard_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[b]">Keyboard_Init</a> from keyboard.o(i.Keyboard_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[c]">Keyboard_No_Access</a> from keyboard.o(i.Keyboard_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[10]">Keyboard_Read</a> from keyboard.o(i.Keyboard_Read) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[6]">LCD_Allow_Access</a> from lcd.o(i.LCD_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[3]">LCD_DeInit</a> from lcd.o(i.LCD_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[7]">LCD_Disable</a> from lcd.o(i.LCD_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[8]">LCD_Enable</a> from lcd.o(i.LCD_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[4]">LCD_Init</a> from lcd.o(i.LCD_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[5]">LCD_No_Access</a> from lcd.o(i.LCD_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[9]">LCD_Write</a> from lcd.o(i.LCD_Write) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[1b]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[14]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced from keyboard.o(i.Keyboard_BS_SW_Oper)
 <LI><a href="#[14]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced from keyboard.o(i.Keyboard_Enter_SW_Oper)
 <LI><a href="#[14]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced from keyboard.o(i.Keyboard_Keypad_Oper)
 <LI><a href="#[14]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[11]">SW_DeInit</a> from sw_lib.o(i.SW_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[11]">SW_DeInit</a> from sw_lib.o(i.SW_DeInit) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[15]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[15]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced from keyboard.o(i.Keyboard_BS_SW_Oper)
 <LI><a href="#[15]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced from keyboard.o(i.Keyboard_Enter_SW_Oper)
 <LI><a href="#[15]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced from keyboard.o(i.Keyboard_Keypad_Oper)
 <LI><a href="#[15]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[16]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[16]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced from keyboard.o(i.Keyboard_BS_SW_Oper)
 <LI><a href="#[16]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced from keyboard.o(i.Keyboard_Enter_SW_Oper)
 <LI><a href="#[16]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced from keyboard.o(i.Keyboard_Keypad_Oper)
 <LI><a href="#[16]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[12]">SW_Init</a> from sw_lib.o(i.SW_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[12]">SW_Init</a> from sw_lib.o(i.SW_Init) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[13]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[13]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced from keyboard.o(i.Keyboard_BS_SW_Oper)
 <LI><a href="#[13]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced from keyboard.o(i.Keyboard_Enter_SW_Oper)
 <LI><a href="#[13]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced from keyboard.o(i.Keyboard_Keypad_Oper)
 <LI><a href="#[13]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[17]">SW_Press_Proc</a> from sw_lib.o(i.SW_Press_Proc) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[19]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[99]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[9a]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[28]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[23]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[25]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[29]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[34]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
</UL>

<P><STRONG><a name="[2f]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[bc]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
</UL>

<P><STRONG><a name="[c1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2a]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c7]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
</UL>

<P><STRONG><a name="[cc]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>After_Switch_Stoke_Proc</STRONG> (ARM, 2000 bytes, Stack size 48 bytes, appl.o(i.After_Switch_Stoke_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = After_Switch_Stoke_Proc &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Keypad_Oper
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Input_Goto_XY
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
</UL>

<P><STRONG><a name="[44]"></a>Appl_Data_Retrieve_Para</STRONG> (ARM, 512 bytes, Stack size 40 bytes, std_lib.o(i.Appl_Data_Retrieve_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Appl_Data_Retrieve_Para &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[4d]"></a>Appl_HW_Init</STRONG> (ARM, 172 bytes, Stack size 8 bytes, appl.o(i.Appl_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Appl_HW_Init &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[50]"></a>Appl_Init</STRONG> (ARM, 76 bytes, Stack size 16 bytes, appl.o(i.Appl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Appl_Init &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Appl_Proc</STRONG> (ARM, 1464 bytes, Stack size 32 bytes, appl.o(i.Appl_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Appl_Proc &rArr; Auth_Fsm_Proc &rArr; After_Switch_Stoke_Proc &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Input_Devs_Read_Oper_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>Appl_Reset</STRONG> (ARM, 1004 bytes, Stack size 40 bytes, appl.o(i.Appl_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cur_Loc_LCD
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[52]"></a>Auth_Fsm_Proc</STRONG> (ARM, 3480 bytes, Stack size 96 bytes, appl.o(i.Auth_Fsm_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Auth_Fsm_Proc &rArr; After_Switch_Stoke_Proc &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Keypad_Oper
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Input_Goto_XY
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auth_Status_Disp_Fsm
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
</UL>

<P><STRONG><a name="[5a]"></a>Check_GPIO_Func</STRONG> (ARM, 636 bytes, Stack size 48 bytes, io_lib.o(i.Check_GPIO_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Check_GPIO_Func &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
</UL>

<P><STRONG><a name="[62]"></a>Config_Consucc_Bits</STRONG> (ARM, 300 bytes, Stack size 32 bytes, std_lib.o(i.Config_Consucc_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = Config_Consucc_Bits &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
</UL>

<P><STRONG><a name="[65]"></a>Config_Port_Pin_Range_Validate</STRONG> (ARM, 240 bytes, Stack size 32 bytes, io_lib.o(i.Config_Port_Pin_Range_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Config_Port_Pin_Range_Validate &rArr; Config_Consucc_Bits &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[3f]"></a>Cur_Data_ID_Devs_Src_Basic_Oper_Func</STRONG> (ARM, 1164 bytes, Stack size 56 bytes, dev_oper.o(i.Cur_Data_ID_Devs_Src_Basic_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Dev_Src_Basic_Oper_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[53]"></a>Cur_Data_ID_Input_Devs_Read_Oper_Func</STRONG> (ARM, 968 bytes, Stack size 32 bytes, dev_oper.o(i.Cur_Data_ID_Input_Devs_Read_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Cur_Data_ID_Input_Devs_Read_Oper_Func &rArr; Dev_Oper_Read_Status_Proc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Oper_Read_Status_Proc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Input_Try_Complete_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
</UL>

<P><STRONG><a name="[6a]"></a>Data_Dev_Src_Access_Oper_Func</STRONG> (ARM, 940 bytes, Stack size 40 bytes, dev_oper.o(i.Data_Dev_Src_Access_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Data_Dev_Src_Access_Oper_Func &rArr; Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
</UL>

<P><STRONG><a name="[46]"></a>Data_ID_Set_Para</STRONG> (ARM, 224 bytes, Stack size 16 bytes, std_lib.o(i.Data_ID_Set_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Data_ID_Set_Para &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[40]"></a>Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID</STRONG> (ARM, 436 bytes, Stack size 32 bytes, dev_oper.o(i.Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID &rArr; Dev_ID_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[6c]"></a>Data_IDs_Set_Para</STRONG> (ARM, 116 bytes, Stack size 16 bytes, std_lib.o(i.Data_IDs_Set_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Data_IDs_Set_Para &rArr; Data_ID_Set_Para &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[6b]"></a>Dev_ID_Validate</STRONG> (ARM, 636 bytes, Stack size 16 bytes, dev_oper.o(i.Dev_ID_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Dev_ID_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
</UL>

<P><STRONG><a name="[6d]"></a>Disable_All_Keyboards</STRONG> (ARM, 52 bytes, Stack size 8 bytes, keyboard.o(i.Disable_All_Keyboards))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Disable_All_Keyboards &rArr; Keyboard_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[6e]"></a>Disable_All_LCDs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, lcd.o(i.Disable_All_LCDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Disable_All_LCDs &rArr; LCD_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[6f]"></a>Disable_All_SWs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sw_lib.o(i.Disable_All_SWs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable_All_SWs
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[54]"></a>Disp_Status_Fsm</STRONG> (ARM, 1740 bytes, Stack size 80 bytes, appl.o(i.Disp_Status_Fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Disp_Status_Fsm &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
</UL>

<P><STRONG><a name="[79]"></a>Entered_Key_No_Long_Press_Proc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, keyboard.o(i.Entered_Key_No_Long_Press_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard_Col_Scan
</UL>

<P><STRONG><a name="[3c]"></a>Error_or_Warning_Proc</STRONG> (ARM, 140 bytes, Stack size 24 bytes, std_lib.o(i.Error_or_Warning_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Keypad_Oper
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enter_SW_Read_Proc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enter_SW_Oper
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_BS_SW_Read_Proc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_BS_SW_Oper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard_Col_Scan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_in_Data
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD_Command_NO_BF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Cur_Data_Status_Para
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Input_Goto_XY
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_XY_To_Loc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_Loc_to_XY
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Command
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Enable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_No_Access
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Disable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_DeInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Allow_Access
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_Devs_Src_Allow
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_Validate
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Src_Spec_Dev_Find_Dev_Ch_ID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Input_Devs_Read_Oper_Func
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Oper_Read_Status_Proc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Input_Try_Complete_Proc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Dev_Src_Basic_Oper_Func
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[5e]"></a>IO_Ch_Func_Reset</STRONG> (ARM, 512 bytes, Stack size 40 bytes, io_lib.o(i.IO_Ch_Func_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IO_Ch_Func_Reset &rArr; SW_Ch_UnConfig_By_IO_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_DeInit
</UL>

<P><STRONG><a name="[74]"></a>IO_Ch_To_SW_Ch</STRONG> (ARM, 196 bytes, Stack size 24 bytes, sw_lib.o(i.IO_Ch_To_SW_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = IO_Ch_To_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
</UL>

<P><STRONG><a name="[5b]"></a>IO_Ch_Validate</STRONG> (ARM, 312 bytes, Stack size 8 bytes, io_lib.o(i.IO_Ch_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Validate
</UL>

<P><STRONG><a name="[75]"></a>IO_Channel_Read</STRONG> (ARM, 224 bytes, Stack size 36 bytes, io_lib.o(i.IO_Channel_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IO_Channel_Read &rArr; Check_GPIO_Func &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
</UL>

<P><STRONG><a name="[5d]"></a>IO_Channel_Write</STRONG> (ARM, 300 bytes, Stack size 36 bytes, io_lib.o(i.IO_Channel_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IO_Channel_Write &rArr; Check_GPIO_Func &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD_Command_NO_BF
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Command
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
</UL>

<P><STRONG><a name="[5f]"></a>IO_Channels_Func_Set</STRONG> (ARM, 1040 bytes, Stack size 24 bytes, io_lib.o(i.IO_Channels_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = IO_Channels_Func_Set &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_IO_Func_Set_Validate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_IO_Func_Set_Validate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_GPIO_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
</UL>

<P><STRONG><a name="[d]"></a>Keyboard_Allow_Access</STRONG> (ARM, 216 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_Allow_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Keyboard_Allow_Access &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Allow_Access
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>Keyboard_BS_SW_Oper</STRONG> (ARM, 332 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_BS_SW_Oper))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Keyboard_BS_SW_Oper &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
</UL>

<P><STRONG><a name="[7b]"></a>Keyboard_BS_SW_Read_Proc</STRONG> (ARM, 292 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_BS_SW_Read_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Keyboard_BS_SW_Read_Proc &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
</UL>

<P><STRONG><a name="[a]"></a>Keyboard_DeInit</STRONG> (ARM, 664 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Keyboard_DeInit &rArr; Keyboard_No_Access &rArr; Keyboard_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_No_Access
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Keyboard_Disable</STRONG> (ARM, 228 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Keyboard_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_Keyboards
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_No_Access
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Keyboard_Enable</STRONG> (ARM, 100 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Keyboard_Enable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>Keyboard_Enter_SW_Oper</STRONG> (ARM, 304 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_Enter_SW_Oper))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Keyboard_Enter_SW_Oper &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
</UL>

<P><STRONG><a name="[7d]"></a>Keyboard_Enter_SW_Read_Proc</STRONG> (ARM, 264 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_Enter_SW_Read_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Keyboard_Enter_SW_Read_Proc &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
</UL>

<P><STRONG><a name="[b]"></a>Keyboard_Init</STRONG> (ARM, 1240 bytes, Stack size 32 bytes, keyboard.o(i.Keyboard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Keyboard_Init &rArr; SW_Para_Init &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>Keyboard_Keypad_Oper</STRONG> (ARM, 300 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_Keypad_Oper))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Keyboard_Keypad_Oper &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[c]"></a>Keyboard_No_Access</STRONG> (ARM, 224 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Keyboard_No_Access &rArr; Keyboard_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Disable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Keyboard_Read</STRONG> (ARM, 1284 bytes, Stack size 48 bytes, keyboard.o(i.Keyboard_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Keyboard_Read &rArr; KeyBoard_Col_Scan &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enter_SW_Read_Proc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enter_SW_Oper
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_BS_SW_Read_Proc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_BS_SW_Oper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard_Col_Scan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Disable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LCD_Allow_Access</STRONG> (ARM, 72 bytes, Stack size 0 bytes, lcd.o(i.LCD_Allow_Access))
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LCD_Clear_Screen</STRONG> (ARM, 44 bytes, Stack size 8 bytes, lcd.o(i.LCD_Clear_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_Clear_Screen &rArr; LCD_Write_Command &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[45]"></a>LCD_Cur_Data_By_NumChars_Calc_Para</STRONG> (ARM, 764 bytes, Stack size 48 bytes, lcd.o(i.LCD_Cur_Data_By_NumChars_Calc_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LCD_Cur_Data_By_NumChars_Calc_Para &rArr; LCD_From_XY_To_Loc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Cur_Data_Status_Para
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_XY_To_Loc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[3]"></a>LCD_DeInit</STRONG> (ARM, 336 bytes, Stack size 24 bytes, lcd.o(i.LCD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LCD_DeInit &rArr; LCD_No_Access &rArr; LCD_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_No_Access
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LCD_Disable</STRONG> (ARM, 100 bytes, Stack size 16 bytes, lcd.o(i.LCD_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LCD_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_LCDs
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_No_Access
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LCD_Disp_Goto_XY</STRONG> (ARM, 376 bytes, Stack size 32 bytes, lcd.o(i.LCD_Disp_Goto_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[84]"></a>LCD_Disp_Num</STRONG> (ARM, 828 bytes, Stack size 80 bytes, lcd.o(i.LCD_Disp_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = LCD_Disp_Num &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Of
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[43]"></a>LCD_Disp_Str</STRONG> (ARM, 172 bytes, Stack size 24 bytes, lcd.o(i.LCD_Disp_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = LCD_Disp_Str &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[8]"></a>LCD_Enable</STRONG> (ARM, 100 bytes, Stack size 16 bytes, lcd.o(i.LCD_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LCD_Enable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LCD_From_Loc_to_XY</STRONG> (ARM, 612 bytes, Stack size 24 bytes, lcd.o(i.LCD_From_Loc_to_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LCD_From_Loc_to_XY &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
</UL>

<P><STRONG><a name="[83]"></a>LCD_From_XY_To_Loc</STRONG> (ARM, 432 bytes, Stack size 24 bytes, lcd.o(i.LCD_From_XY_To_Loc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LCD_From_XY_To_Loc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
</UL>

<P><STRONG><a name="[4]"></a>LCD_Init</STRONG> (ARM, 836 bytes, Stack size 24 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LCD_Init &rArr; Write_LCD_Command_NO_BF &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_in_Data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD_Command_NO_BF
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LCD_Input_Goto_XY</STRONG> (ARM, 376 bytes, Stack size 32 bytes, lcd.o(i.LCD_Input_Goto_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LCD_Input_Goto_XY &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[4a]"></a>LCD_Loc_Ctrl_Proc</STRONG> (ARM, 1016 bytes, Stack size 40 bytes, lcd.o(i.LCD_Loc_Ctrl_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LCD_Loc_Ctrl_Proc &rArr; LCD_From_XY_To_Loc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_XY_To_Loc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_Loc_to_XY
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[5]"></a>LCD_No_Access</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd.o(i.LCD_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LCD_No_Access &rArr; LCD_Disable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LCD_Write</STRONG> (ARM, 1204 bytes, Stack size 64 bytes, lcd.o(i.LCD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LCD_Write &rArr; LCD_Disp_Num &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LCD_Write_Char</STRONG> (ARM, 1060 bytes, Stack size 32 bytes, lcd.o(i.LCD_Write_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = LCD_Write_Char &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[48]"></a>LCD_Write_Command</STRONG> (ARM, 1080 bytes, Stack size 32 bytes, lcd.o(i.LCD_Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = LCD_Write_Command &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Input_Goto_XY
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[3b]"></a>Next_Data_Conf_Parameter</STRONG> (ARM, 168 bytes, Stack size 16 bytes, std_lib.o(i.Next_Data_Conf_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Next_Data_Conf_Parameter &rArr; Data_Dev_Src_Access_Oper_Func &rArr; Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[8b]"></a>Non_GPIO_Func_Set</STRONG> (ARM, 240 bytes, Stack size 24 bytes, io_lib.o(i.Non_GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4f]"></a>Output_Dev_Init</STRONG> (ARM, 168 bytes, Stack size 24 bytes, io_lib.o(i.Output_Dev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Output_Dev_Init &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>

<P><STRONG><a name="[8c]"></a>Port_Read</STRONG> (ARM, 276 bytes, Stack size 40 bytes, io_lib.o(i.Port_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port_Read &rArr; Check_GPIO_Func &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Command
</UL>

<P><STRONG><a name="[8a]"></a>Port_Write</STRONG> (ARM, 340 bytes, Stack size 40 bytes, io_lib.o(i.Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port_Write &rArr; Check_GPIO_Func &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD_Command_NO_BF
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
</UL>

<P><STRONG><a name="[86]"></a>Power_Of</STRONG> (ARM, 60 bytes, Stack size 0 bytes, std_lib.o(i.Power_Of))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
</UL>

<P><STRONG><a name="[8d]"></a>Reset_Data_Devs_Src_Allow</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dev_oper.o(i.Reset_Data_Devs_Src_Allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Reset_Data_Devs_Src_Allow &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Devs_Src_Allow
</UL>

<P><STRONG><a name="[58]"></a>Reset_Data_ID_Status</STRONG> (ARM, 304 bytes, Stack size 16 bytes, std_lib.o(i.Reset_Data_ID_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auth_Status_Disp_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
</UL>

<P><STRONG><a name="[8f]"></a>Reset_Data_IDs_Status</STRONG> (ARM, 32 bytes, Stack size 8 bytes, std_lib.o(i.Reset_Data_IDs_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Reset_Data_IDs_Status &rArr; Set_Status_Reset_Data_IDs &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[72]"></a>Reset_IO_Chs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, io_lib.o(i.Reset_IO_Chs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Reset_IO_Chs &rArr; Reset_SW_Chs &rArr; Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Chs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ports
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[81]"></a>Reset_LCD_Cur_Data_Status_Para</STRONG> (ARM, 156 bytes, Stack size 16 bytes, lcd.o(i.Reset_LCD_Cur_Data_Status_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Reset_LCD_Cur_Data_Status_Para &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cur_Data_By_NumChars_Calc_Para
</UL>

<P><STRONG><a name="[90]"></a>Reset_Ports</STRONG> (ARM, 104 bytes, Stack size 0 bytes, io_lib.o(i.Reset_Ports))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
</UL>

<P><STRONG><a name="[92]"></a>Reset_Process</STRONG> (ARM, 192 bytes, Stack size 16 bytes, main.o(i.Reset_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Reset_Process &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_IDs_Status
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_SWs
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_Keyboards
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_LCDs
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[93]"></a>Reset_SW_Ch</STRONG> (ARM, 172 bytes, Stack size 8 bytes, sw_lib.o(i.Reset_SW_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Chs
</UL>

<P><STRONG><a name="[91]"></a>Reset_SW_Chs</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sw_lib.o(i.Reset_SW_Chs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Reset_SW_Chs &rArr; Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
</UL>

<P><STRONG><a name="[14]"></a>SW_Allow_Access</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sw_lib.o(i.SW_Allow_Access))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Allow_Access
</UL>
<BR>[Address Reference Count : 5]<UL><LI> dev_oper.o(.data)
<LI> keyboard.o(i.Keyboard_Enter_SW_Oper)
<LI> keyboard.o(i.Keyboard_Keypad_Oper)
<LI> sw_lib.o(i.SW_Oper)
<LI> keyboard.o(i.Keyboard_BS_SW_Oper)
</UL>
<P><STRONG><a name="[7e]"></a>SW_Ch_ID_Check_And_Alloc</STRONG> (ARM, 792 bytes, Stack size 40 bytes, sw_lib.o(i.SW_Ch_ID_Check_And_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SW_Ch_ID_Check_And_Alloc &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
</UL>

<P><STRONG><a name="[73]"></a>SW_Ch_UnConfig_By_IO_Ch</STRONG> (ARM, 132 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Ch_UnConfig_By_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = SW_Ch_UnConfig_By_IO_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>

<P><STRONG><a name="[11]"></a>SW_DeInit</STRONG> (ARM, 248 bytes, Stack size 24 bytes, sw_lib.o(i.SW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SW_DeInit &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_oper.o(.data)
<LI> sw_lib.o(i.SW_Oper)
</UL>
<P><STRONG><a name="[15]"></a>SW_Disable</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sw_lib.o(i.SW_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_SWs
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Disable
</UL>
<BR>[Address Reference Count : 5]<UL><LI> dev_oper.o(.data)
<LI> keyboard.o(i.Keyboard_Enter_SW_Oper)
<LI> keyboard.o(i.Keyboard_Keypad_Oper)
<LI> sw_lib.o(i.SW_Oper)
<LI> keyboard.o(i.Keyboard_BS_SW_Oper)
</UL>
<P><STRONG><a name="[16]"></a>SW_Enable</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sw_lib.o(i.SW_Enable))
<BR>[Address Reference Count : 5]<UL><LI> dev_oper.o(.data)
<LI> keyboard.o(i.Keyboard_Enter_SW_Oper)
<LI> keyboard.o(i.Keyboard_Keypad_Oper)
<LI> sw_lib.o(i.SW_Oper)
<LI> keyboard.o(i.Keyboard_BS_SW_Oper)
</UL>
<P><STRONG><a name="[12]"></a>SW_Init</STRONG> (ARM, 440 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SW_Init &rArr; SW_Para_Init &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_oper.o(.data)
<LI> sw_lib.o(i.SW_Oper)
</UL>
<P><STRONG><a name="[13]"></a>SW_No_Access</STRONG> (ARM, 92 bytes, Stack size 12 bytes, sw_lib.o(i.SW_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SW_No_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_No_Access
</UL>
<BR>[Address Reference Count : 5]<UL><LI> dev_oper.o(.data)
<LI> keyboard.o(i.Keyboard_Enter_SW_Oper)
<LI> keyboard.o(i.Keyboard_Keypad_Oper)
<LI> sw_lib.o(i.SW_Oper)
<LI> keyboard.o(i.Keyboard_BS_SW_Oper)
</UL>
<P><STRONG><a name="[3d]"></a>SW_Oper</STRONG> (ARM, 524 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Oper))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[7f]"></a>SW_Para_Init</STRONG> (ARM, 316 bytes, Stack size 32 bytes, sw_lib.o(i.SW_Para_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SW_Para_Init &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
</UL>

<P><STRONG><a name="[17]"></a>SW_Press_Proc</STRONG> (ARM, 636 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Press_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Enter_SW_Read_Proc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_BS_SW_Read_Proc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard_Col_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>SW_Read</STRONG> (ARM, 192 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
</UL>

<P><STRONG><a name="[80]"></a>SW_Time_Delay</STRONG> (ARM, 44 bytes, Stack size 0 bytes, std_lib.o(i.SW_Time_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD_Command_NO_BF
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Loc_Ctrl_Proc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Command
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[59]"></a>Set_Auth_Status_Disp_Fsm</STRONG> (ARM, 64 bytes, Stack size 8 bytes, appl.o(i.Set_Auth_Status_Disp_Fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Set_Auth_Status_Disp_Fsm &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
</UL>

<P><STRONG><a name="[56]"></a>Set_Cur_Loc_LCD</STRONG> (ARM, 64 bytes, Stack size 8 bytes, lcd.o(i.Set_Cur_Loc_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Cur_Loc_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
</UL>

<P><STRONG><a name="[3e]"></a>Set_Data_Devs_Src_Allow</STRONG> (ARM, 628 bytes, Stack size 32 bytes, dev_oper.o(i.Set_Data_Devs_Src_Allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Set_Data_Devs_Src_Allow &rArr; Reset_Data_Devs_Src_Allow &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_Devs_Src_Allow
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Status_Fsm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_Fsm_Proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;After_Switch_Stoke_Proc
</UL>

<P><STRONG><a name="[55]"></a>Set_Status_Reset_Data_IDs</STRONG> (ARM, 108 bytes, Stack size 16 bytes, std_lib.o(i.Set_Status_Reset_Data_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Set_Status_Reset_Data_IDs &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_IDs_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
</UL>

<P><STRONG><a name="[94]"></a>Test_Consucc_Bits</STRONG> (ARM, 412 bytes, Stack size 40 bytes, std_lib.o(i.Test_Consucc_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
</UL>

<P><STRONG><a name="[4e]"></a>UART_Init</STRONG> (ARM, 328 bytes, Stack size 16 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = UART_Init &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>

<P><STRONG><a name="[89]"></a>Write_Bit_in_Data</STRONG> (ARM, 200 bytes, Stack size 16 bytes, std_lib.o(i.Write_Bit_in_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Write_Bit_in_Data &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[88]"></a>Write_LCD_Command_NO_BF</STRONG> (ARM, 504 bytes, Stack size 40 bytes, lcd.o(i.Write_LCD_Command_NO_BF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Write_LCD_Command_NO_BF &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (ARM, 80 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = main &rArr; Appl_Proc &rArr; Auth_Fsm_Proc &rArr; After_Switch_Stoke_Proc &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Cur_Data_ID_Dev_Src_Basic_Oper_Func</STRONG> (ARM, 1412 bytes, Stack size 16 bytes, dev_oper.o(i.Cur_Data_ID_Dev_Src_Basic_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
</UL>

<P><STRONG><a name="[68]"></a>Data_ID_Input_Try_Complete_Proc</STRONG> (ARM, 232 bytes, Stack size 16 bytes, dev_oper.o(i.Data_ID_Input_Try_Complete_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Data_ID_Input_Try_Complete_Proc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Input_Devs_Read_Oper_Func
</UL>

<P><STRONG><a name="[69]"></a>Dev_Oper_Read_Status_Proc</STRONG> (ARM, 1332 bytes, Stack size 32 bytes, dev_oper.o(i.Dev_Oper_Read_Status_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Dev_Oper_Read_Status_Proc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Input_Devs_Read_Oper_Func
</UL>

<P><STRONG><a name="[63]"></a>Config_GPIO_Func_Set</STRONG> (ARM, 1092 bytes, Stack size 24 bytes, io_lib.o(i.Config_GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Config_GPIO_Func_Set &rArr; GPIO_Func_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[66]"></a>Config_Port_Pin_Validate</STRONG> (ARM, 180 bytes, Stack size 20 bytes, io_lib.o(i.Config_Port_Pin_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Config_Port_Pin_Validate &rArr; IO_Ch_Validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
</UL>

<P><STRONG><a name="[77]"></a>Debug_IO_Func_Set_Validate</STRONG> (ARM, 48 bytes, Stack size 0 bytes, io_lib.o(i.Debug_IO_Func_Set_Validate))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[64]"></a>GPIO_Func_Set</STRONG> (ARM, 604 bytes, Stack size 28 bytes, io_lib.o(i.GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_GPIO_Func_Set
</UL>

<P><STRONG><a name="[76]"></a>Trace_IO_Func_Set_Validate</STRONG> (ARM, 48 bytes, Stack size 0 bytes, io_lib.o(i.Trace_IO_Func_Set_Validate))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[5c]"></a>Check_LCD_Busy</STRONG> (ARM, 716 bytes, Stack size 24 bytes, lcd.o(i.Check_LCD_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = Check_LCD_Busy &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Command
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Char
</UL>

<P><STRONG><a name="[60]"></a>Read_LCD_Command</STRONG> (ARM, 956 bytes, Stack size 32 bytes, lcd.o(i.Read_LCD_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = Read_LCD_Command &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Time_Delay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LCD_Busy
</UL>

<P><STRONG><a name="[78]"></a>KeyBoard_Col_Scan</STRONG> (ARM, 236 bytes, Stack size 40 bytes, keyboard.o(i.KeyBoard_Col_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = KeyBoard_Col_Scan &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entered_Key_No_Long_Press_Proc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Read
</UL>

<P><STRONG><a name="[70]"></a>HW_Init</STRONG> (ARM, 88 bytes, Stack size 16 bytes, main.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = HW_Init &rArr; Appl_HW_Init &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[71]"></a>PLL_Init</STRONG> (ARM, 100 bytes, Stack size 0 bytes, main.o(i.PLL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[97]"></a>System_Init</STRONG> (ARM, 192 bytes, Stack size 8 bytes, main.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = System_Init &rArr; Reset_Process &rArr; Appl_Reset &rArr; SW_Oper &rArr; SW_Press_Proc &rArr; SW_Read &rArr; SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>SW_Ch_Validate</STRONG> (ARM, 168 bytes, Stack size 32 bytes, sw_lib.o(i.SW_Ch_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SW_Ch_Validate &rArr; Test_Consucc_Bits &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
</UL>

<P><STRONG><a name="[61]"></a>Comm_Error_Proc</STRONG> (ARM, 380 bytes, Stack size 64 bytes, std_lib.o(i.Comm_Error_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Comm_Error_Proc &rArr; LCD_Disp_Goto_XY &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>

<P><STRONG><a name="[38]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[37]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[36]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[39]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
